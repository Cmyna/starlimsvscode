/********************************************************************************
Description.. :	Utility functions
Author....... :	MARIUS, DC
Date......... : 2018-11-02
*******************************************************************************/;
:CLASS Utils;

:PROCEDURE TranslateFileTypeToItemType;
:PARAMETERS sFileType;
:DECLARE sItemType;
	:BEGINCASE;
		:CASE sFileType == "SS";
			sItemType := "ServerScript";
		:EXITCASE;
		:CASE sFileType == "CS";
			sItemType := "ClientScript";
		:EXITCASE;
		:CASE sFileType == "APPSS";
			sItemType := "AppServerScript";
		:EXITCASE;
		:CASE sFileType == "APPCS";
			sItemType := "AppClientScript";
		:EXITCASE;
		:CASE sFileType == "FRM";
			sItemType := "Form";
		:EXITCASE;
		:CASE sFileType == "DS";
			sItemType := "DataSourceScript";
		:EXITCASE;
		:CASE sFileType == "APPDS";
			sItemType := "AppDataSourceScript";
		:EXITCASE;
		:CASE sFileType == "SERVERLOG";
			sItemType := "ServerLog";
		:OTHERWISE;
			sItemType := "Unknown";
		:EXITCASE;
	:ENDCASE;
	
	:RETURN sItemType;
:ENDPROC;

:PROCEDURE GetSCMItemGUID;
:PARAMETERS sItemType, sCategory, sItemName;

:DECLARE sGUID;

	:BEGINCASE;
		:CASE sItemType == "ServerScript";
			/* Global Server Script; 
			:TRY;
				sGUID := DoProc("Enterprise_Data_Providers.ServerScriptProvider.GetScriptIdByName", {sCategory + "." + sItemName});
			:CATCH;
				/* TODO: set distinction between not found and general error;
				sGUID := NIL;
			:ENDTRY;
		:EXITCASE;
	:ENDCASE;

	:RETURN sGUID;
:ENDPROC;

:PROCEDURE GetDataSetTableFromString;
:PARAMETERS sDataSet;
:DECLARE oDataSet;
	oDataSet := DoProc( "Enterprise_Server.DataSetSupport.DsFromString", {sDataSet});
	:IF oDataSet:Tables:Count > 0;
		:RETURN oDataSet:Tables[0];
	:ELSE;
		:RETURN NIL;
	:ENDIF;
:ENDPROC;

:PROCEDURE RemoveDBNull;
:PARAMETERS oObject;
	:DECLARE oDBNull;
	oDBNull := LimsNetConnect("System", "System.DBNull");

	:DECLARE aProps, i;
	aProps := oObject:GetProperties();
	:FOR i := 1 :TO Len(aProps);
		:DECLARE oValue;
		oValue := GetInternal(oObject, aProps[i]);
		:IF oDBNull:Value:Equals(oValue);
			SetInternal(oObject, aProps[i], ""); 
		:ENDIF;
	:NEXT;
	
	:RETURN oObject;
:ENDPROC;

:PROCEDURE ParseURI;
:PARAMETERS sURI;
:DEFAULT sURI, "";
:DECLARE aComponents, oEnterpriseItem, nCount;
	oEnterpriseItem := CreateUDObject();
	aComponents := Me:GetURIComponents(sURI);
	nCount := Len(aComponents);
	
	:IF Empty(aComponents);
		oEnterpriseItem:Type := "ROOT";
		:RETURN oEnterpriseItem;
	:ENDIF;
	
	:DECLARE sEnterpriseCategory;
	sEnterpriseCategory := aComponents[1];
	
	:BEGINCASE;
		:CASE sEnterpriseCategory == "Applications" .AND. nCount == 1;
			oEnterpriseItem:Type := "ENT_CAT_APPS";
		:EXITCASE;
		:CASE sEnterpriseCategory == "Applications" .AND. nCount == 2;
			oEnterpriseItem:Type := "APPCATEGORY";
			oEnterpriseItem:Name := aComponents[2];
		:EXITCASE;
		:CASE sEnterpriseCategory == "Applications" .AND. nCount == 3;
			oEnterpriseItem:Type := "APP";
			oEnterpriseItem:Category := aComponents[2];
			oEnterpriseItem:Name := aComponents[3];
		:EXITCASE;
		:CASE sEnterpriseCategory == "Applications" .AND. nCount == 4;
			oEnterpriseItem:Type := "APPSUBCATEGORY";
			oEnterpriseItem:Category := aComponents[2];
			oEnterpriseItem:AppName := aComponents[3];
			oEnterpriseItem:Name := aComponents[4];
		:EXITCASE;
		:CASE sEnterpriseCategory == "Applications" .AND. nCount >= 5;
			:DECLARE sSubCategory, sFormCodeType;
			sSubCategory := aComponents[4];
			oEnterpriseItem:AppName := aComponents[3];
			:BEGINCASE;
				:CASE sSubCategory == "ServerScripts";
					oEnterpriseItem:Type := "APPSS";
					oEnterpriseItem:Name := aComponents[5];
				:EXITCASE;
				:CASE sSubCategory == "ClientScripts";
					oEnterpriseItem:Type := "APPCS";
					oEnterpriseItem:Name := aComponents[5];
				:EXITCASE;
				:CASE sSubCategory == "DataSources";
					oEnterpriseItem:Type := "APPDS";
					oEnterpriseItem:Name := aComponents[5];
				:EXITCASE;
				:CASE sSubCategory == "HTMLForms";
					sFormCodeType := aComponents[5];
					oEnterpriseItem:Name := aComponents[6];
					:IF sFormCodeType == "XML";
						oEnterpriseItem:Type := "HTMLFORMXML";
					:ELSE;
						:IF sFormCodeType == "Guide";
							oEnterpriseItem:Type := "HTMLFORMGUIDE";
						:ELSE;
							oEnterpriseItem:Type := "HTMLFORMCODE";
						:ENDIF;
					:ENDIF;
				:EXITCASE;
				:CASE sSubCategory == "XFDForms";
					sFormCodeType := aComponents[5];
					oEnterpriseItem:Name := aComponents[6];
					:IF sFormCodeType == "XML";
						oEnterpriseItem:Type := "XFDFORMXML";
					:ELSE;
						oEnterpriseItem:Type := "XFDFORMCODE";
					:ENDIF;
				:EXITCASE;
			:ENDCASE;	
		:EXITCASE;
		:CASE sEnterpriseCategory == "ServerScripts" .AND. nCount == 1;
			oEnterpriseItem:Type := "ENT_CAT_SS";
		:EXITCASE;
		:CASE sEnterpriseCategory == "ServerScripts" .AND. nCount == 2;
			oEnterpriseItem:Type := "SSCATEGORY";
			oEnterpriseItem:Name := aComponents[2];
		:EXITCASE;
		:CASE sEnterpriseCategory == "ServerScripts" .AND. nCount == 3;
			oEnterpriseItem:Type := "SS";
			oEnterpriseItem:CategoryName := aComponents[2];
			oEnterpriseItem:Name := aComponents[3];
		:EXITCASE;
		:CASE sEnterpriseCategory == "ClientScripts" .AND. nCount == 1;
			oEnterpriseItem:Type := "ENT_CAT_CS";
		:EXITCASE;
		:CASE sEnterpriseCategory == "ClientScripts" .AND. nCount == 2;
			oEnterpriseItem:Type := "CSCATEGORY";
			oEnterpriseItem:Name := aComponents[2];
		:EXITCASE;
		:CASE sEnterpriseCategory == "ClientScripts" .AND. nCount == 3;
			oEnterpriseItem:Type := "CS";
			oEnterpriseItem:CategoryName := aComponents[2];
			oEnterpriseItem:Name := aComponents[3];
		:EXITCASE;
		:CASE sEnterpriseCategory == "DataSources" .AND. nCount == 1;
			oEnterpriseItem:Type := "ENT_CAT_DS";
		:EXITCASE;
		:CASE sEnterpriseCategory == "DataSources" .AND. nCount == 2;
			oEnterpriseItem:Type := "DSCATEGORY";
			oEnterpriseItem:Name := aComponents[2];
		:EXITCASE;
		:CASE sEnterpriseCategory == "DataSources" .AND. nCount == 3;
			oEnterpriseItem:Type := "DS";
			oEnterpriseItem:CategoryName := aComponents[2];
			oEnterpriseItem:Name := aComponents[3];
		:EXITCASE;
		:CASE sEnterpriseCategory == "ServerLogs" .AND. nCount == 1;
			oEnterpriseItem:Type := "ENT_CAT_LOG";
		:EXITCASE;
		:CASE sEnterpriseCategory == "ServerLogs" .AND. nCount == 2;
			oEnterpriseItem:Type := "SERVERLOG";
			oEnterpriseItem:CategoryName := aComponents[1];
			oEnterpriseItem:Name := aComponents[2];
		:EXITCASE;
	:ENDCASE;
	
	:RETURN oEnterpriseItem;
:ENDPROC;

:PROCEDURE GetURIComponents;
:PARAMETERS sURI;
:DECLARE aURIComponents;
	aURIComponents := BuildArray(sURI,,"/",,.T.);
	:IF Len(aURIComponents) > 0;
		:RETURN DelArray(aURIComponents, 1);
	:ELSE;
		:RETURN {};
	:ENDIF;
:ENDPROC;

:PROCEDURE GetItemGUID;
:PARAMETERS sItemName, sItemType;
:DECLARE sGUID, aItemName;
aItemName := BuildArray(sItemName,, ".");
:BEGINCASE;
	:CASE sItemType == "SS".OR. sItemType == "APPSS";
        sGUID := Me:GetServerScriptId(aItemName[1], aItemName[2]);
	:EXITCASE;
	:CASE sItemType == "CS" .OR. sItemType == "APPCS";
        sGUID := Me:GetClientScriptId(aItemName[1], aItemName[2]);
	:EXITCASE;
	:CASE sItemType == "DS" .OR. sItemType == "APPDS";
        sGUID := Me:GetDataSourceId(aItemName[1], aItemName[2]);
	:EXITCASE;
	:CASE sItemType == "HTMLFORMXML" .OR. sItemType == "HTMLFORMCODE";
		sGUID := Me:GetFormId(aItemName[1], aItemName[2], "HTML");
	:EXITCASE;
    :CASE sItemType == "XFDFORMXML" .OR. sItemType == "XFDFORMCODE";
        sGUID := Me:GetFormId(aItemName[1], aItemName[2], "XFD");
    :EXITCASE;
:ENDCASE;
:RETURN sGUID;
:ENDPROC;

/* -------------------------------------------------------------------
Returns the Form GUID for the form identified by AppName and FormName
----------------------------------------------------------------------;
:PROCEDURE GetFormId;
:PARAMETERS sAppName, sFormName, sFormType;
:DEFAULT sFormType, 'XFD';
	:DECLARE sSQL, aReturn, sSysLayerId;
	
	sSysLayerId := GetSystemLayerId();
	sAppName := Upper(sAppName);
	sFormName := Upper(sFormName);
	
	sSQL := "SELECT f.FORMID 
				FROM LIMSXFDFORMS f, LIMSAPPLICATIONS
				WHERE f.APPID = LIMSAPPLICATIONS.APPID
					AND LIMSAPPLICATIONS.APPNAME = ?sAppName?
					AND f.FORMNAME = ?sFormName?
					AND FORMTYPE = ?sFormType?
				order by
					case
						when f.LAYERID <= ?sSysLayerId? then ?sSysLayerId? - f.LAYERID
						else f.LAYERID
					end";

	aReturn := SqlExecute(sSQL, "DICTIONARY");
	
	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;

/* -------------------------------------------------------------------------------
Returns the Client script GUID for the script identified by CatName and ScriptName
----------------------------------------------------------------------------------;
:PROCEDURE GetClientScriptId;
:PARAMETERS sCatName, sScriptName;
	:DECLARE sSQL, aReturn, sSysLayerId;
	
	sSysLayerId := GetSystemLayerId();
	sCatName := Upper(sCatName);
	sScriptName := Upper(sScriptName);
	
	sSQL := "SELECT s.SCRIPTID 
				FROM LIMSCLIENTSCRIPTS s, LIMSCLIENTSCRIPTCATEGORIES
				WHERE s.CATEGORYID = LIMSCLIENTSCRIPTCATEGORIES.CATEGORYID
					AND LIMSCLIENTSCRIPTCATEGORIES.CATNAME = ?sCatName?
					AND s.SCRIPTNAME = ?sScriptName?
				order by
					case
						when s.LAYERID <= ?sSysLayerId? then ?sSysLayerId? - s.LAYERID
						else s.LAYERID
					end";

	aReturn := SqlExecute(sSQL, "DICTIONARY");
	
	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;

/* -------------------------------------------------------------------------------
Returns the Server script GUID for the script identified by CatName and ScriptName
----------------------------------------------------------------------------------;
:PROCEDURE GetServerScriptId;
:PARAMETERS sCatName, sScriptName;
	:DECLARE sSQL, aReturn, sSysLayerId;
	sSysLayerId := GetSystemLayerId();	
	sCatName := Upper(sCatName);
	sScriptName := Upper(sScriptName);
	
	sSQL := "SELECT s.SCRIPTID 
				FROM LIMSSERVERSCRIPTS s, LIMSSERVERSCRIPTCATEGORIES
				WHERE s.CATEGORYID = LIMSSERVERSCRIPTCATEGORIES.CATEGORYID
					AND LIMSSERVERSCRIPTCATEGORIES.CATNAME = ?sCatName?
					AND s.SCRIPTNAME = ?sScriptName?
				order by
					case
						when s.LAYERID <= ?sSysLayerId? then ?sSysLayerId? - s.LAYERID
						else s.LAYERID
					end";

	aReturn := SqlExecute(sSQL, "DICTIONARY");
	
	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;

/* ------------------------------------------------------------------
Private function used by other functions in this module.
Returns the name of an entity in cat.name format based on
an sql statement and an Id.
------------------------------------------------------------------;
:PROCEDURE GetEntityName;
:PARAMETERS sId, sSqlStatement;
	:DECLARE aReturn;
	aReturn := SqlExecute(sSqlStatement, "DICTIONARY");

	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1] + "." + aReturn[1, 2];
:ENDPROC;

/* -------------------------------------------------------------------------------
Returns the Data source GUID for the script identified by CatName and ScriptName
----------------------------------------------------------------------------------;
:PROCEDURE GetDataSourceId;
:PARAMETERS sCatName, sDSName;
	:DECLARE sSQL, aReturn, sSysLayerId;

	sSysLayerId := GetSystemLayerId();
	sCatName := Upper(sCatName);
	sDSName := Upper(sDSName);
	
	sSQL := "SELECT d.DATASOURCEID
				FROM LIMSDATASOURCES d, LIMSDATASOURCECATEGORIES c
				WHERE d.CATEGORYID = c.CATEGORYID
				AND c.CATNAME = ?sCatName?
				AND d.DSNAME = ?sDSName?
				order by
					case
						when d.LAYERID <= ?sSysLayerId? then ?sSysLayerId? - d.LAYERID
						else d.LAYERID
					end";

	aReturn := SqlExecute(sSQL, "DICTIONARY");
	
	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;
