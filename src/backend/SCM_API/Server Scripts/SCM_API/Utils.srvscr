/********************************************************************************
Description.. :	Utility functions
Author....... :	MARIUS, DC
Date......... : 2018-11-02
*******************************************************************************/;
:CLASS Utils;

:PROCEDURE TranslateFileTypeToItemType;
:PARAMETERS sFileType;
:DECLARE sItemType;
	:BEGINCASE;
		:CASE sFileType == "SS";
			sItemType := "ServerScript";
		:EXITCASE;
		:CASE sFileType == "CS";
			sItemType := "ClientScript";
		:EXITCASE;
		:CASE sFileType == "APPSS";
			sItemType := "AppServerScript";
		:EXITCASE;
		:CASE sFileType == "APPCS";
			sItemType := "AppClientScript";
		:EXITCASE;
		:CASE sFileType == "FRM";
			sItemType := "Form";
		:EXITCASE;
		:CASE sFileType == "DS";
			sItemType := "DataSourceScript";
		:EXITCASE;
		:CASE sFileType == "APPDS";
			sItemType := "AppDataSourceScript";
		:EXITCASE;
		:CASE sFileType == "SERVERLOG";
			sItemType := "ServerLog";
		:OTHERWISE;
			sItemType := "Unknown";
		:EXITCASE;
	:ENDCASE;
	
	:RETURN sItemType;
:ENDPROC;

:PROCEDURE GetDataSetTableFromString;
:PARAMETERS sDataSet;
:DECLARE oDataSet;
	oDataSet := DoProc( "Enterprise_Server.DataSetSupport.DsFromString", {sDataSet});
	:IF oDataSet:Tables:Count > 0;
		:RETURN oDataSet:Tables[0];
	:ELSE;
		:RETURN NIL;
	:ENDIF;
:ENDPROC;

:PROCEDURE RemoveDBNull;
:PARAMETERS oObject;
	:DECLARE oDBNull;
	oDBNull := LimsNetConnect("System", "System.DBNull");

	:DECLARE aProps, i;
	aProps := oObject:GetProperties();
	:FOR i := 1 :TO Len(aProps);
		:DECLARE oValue;
		oValue := GetInternal(oObject, aProps[i]);
		:IF oDBNull:Value:Equals(oValue);
			SetInternal(oObject, aProps[i], ""); 
		:ENDIF;
	:NEXT;
	
	:RETURN oObject;
:ENDPROC;

:PROCEDURE ParseURI;
:PARAMETERS sURI;
:DEFAULT sURI, "";
:DECLARE aComponents, oEnterpriseItem, nCount;
	oEnterpriseItem := CreateUDObject();
	
	/* initialize AppName and Category with default values;
	oEnterpriseItem:AppName := "N/A";
	oEnterpriseItem:Category := "N/A";
	
	aComponents := Me:GetURIComponents(sURI);
	nCount := Len(aComponents);
	
	:IF Empty(aComponents);
		oEnterpriseItem:Type := "ROOT";
		:RETURN oEnterpriseItem;
	:ENDIF;
	
	:DECLARE sEnterpriseCategory;
	sEnterpriseCategory := aComponents[1];
	
	:BEGINCASE;
		:CASE sEnterpriseCategory == "Applications" .AND. nCount == 1;
			oEnterpriseItem:Type := "ENT_CAT_APPS";
		:EXITCASE;
		:CASE sEnterpriseCategory == "Applications" .AND. nCount == 2;
			oEnterpriseItem:Type := "APPCATEGORY";
			oEnterpriseItem:Name := aComponents[2];
		:EXITCASE;
		:CASE sEnterpriseCategory == "Applications" .AND. nCount == 3;
			oEnterpriseItem:Type := "APP";
			oEnterpriseItem:Category := aComponents[2];
			oEnterpriseItem:Name := aComponents[3];
		:EXITCASE;
		:CASE sEnterpriseCategory == "Applications" .AND. nCount == 4;
			oEnterpriseItem:Type := "APPSUBCATEGORY";
			oEnterpriseItem:Category := aComponents[2];
			oEnterpriseItem:AppName := aComponents[3];
			oEnterpriseItem:Name := aComponents[4];
		:EXITCASE;
		:CASE sEnterpriseCategory == "Applications" .AND. nCount >= 5;
			:DECLARE sSubCategory, sFormCodeType;
			sSubCategory := aComponents[4];
			oEnterpriseItem:AppName := aComponents[3];
			:BEGINCASE;
				:CASE sSubCategory == "ServerScripts";
					oEnterpriseItem:Type := "APPSS";
					oEnterpriseItem:Name := aComponents[5];
				:EXITCASE;
				:CASE sSubCategory == "ClientScripts";
					oEnterpriseItem:Type := "APPCS";
					oEnterpriseItem:Name := aComponents[5];
				:EXITCASE;
				:CASE sSubCategory == "DataSources";
					oEnterpriseItem:Type := "APPDS";
					oEnterpriseItem:Name := aComponents[5];
				:EXITCASE;
				:CASE sSubCategory == "HTMLForms";
					sFormCodeType := aComponents[5];
					oEnterpriseItem:Name := aComponents[6];
					:IF sFormCodeType == "XML";
						oEnterpriseItem:Type := "HTMLFORMXML";
					:ELSE;
						:IF sFormCodeType == "Guide";
							oEnterpriseItem:Type := "HTMLFORMGUIDE";
						:ELSE;
							:IF sFormCodeType == "Resources";
								oEnterpriseItem:Type := "HTMLFORMRESOURCES";
							:ELSE;
								oEnterpriseItem:Type := "HTMLFORMCODE";
							:ENDIF;
						:ENDIF;
					:ENDIF;
				:EXITCASE;
				:CASE sSubCategory == "XFDForms";
					sFormCodeType := aComponents[5];
					oEnterpriseItem:Name := aComponents[6];
					:IF sFormCodeType == "XML";
						oEnterpriseItem:Type := "XFDFORMXML";
					:ELSE;
						:IF sFormCodeType == "Resources";
							oEnterpriseItem:Type := "XFDFORMRESOURCES";
						:ELSE;
							oEnterpriseItem:Type := "XFDFORMCODE";
						:ENDIF;
					:ENDIF;
				:EXITCASE;
			:ENDCASE;	
		:EXITCASE;
		:CASE sEnterpriseCategory == "ServerScripts" .AND. nCount == 1;
			oEnterpriseItem:Type := "ENT_CAT_SS";
		:EXITCASE;
		:CASE sEnterpriseCategory == "ServerScripts" .AND. nCount == 2;
			oEnterpriseItem:Type := "SSCATEGORY";
			oEnterpriseItem:Name := aComponents[2];
		:EXITCASE;
		:CASE sEnterpriseCategory == "ServerScripts" .AND. nCount == 3;
			oEnterpriseItem:Type := "SS";
			oEnterpriseItem:CategoryName := aComponents[2];
			oEnterpriseItem:Name := aComponents[3];
		:EXITCASE;
		:CASE sEnterpriseCategory == "ClientScripts" .AND. nCount == 1;
			oEnterpriseItem:Type := "ENT_CAT_CS";
		:EXITCASE;
		:CASE sEnterpriseCategory == "ClientScripts" .AND. nCount == 2;
			oEnterpriseItem:Type := "CSCATEGORY";
			oEnterpriseItem:Name := aComponents[2];
		:EXITCASE;
		:CASE sEnterpriseCategory == "ClientScripts" .AND. nCount == 3;
			oEnterpriseItem:Type := "CS";
			oEnterpriseItem:CategoryName := aComponents[2];
			oEnterpriseItem:Name := aComponents[3];
		:EXITCASE;
		:CASE sEnterpriseCategory == "DataSources" .AND. nCount == 1;
			oEnterpriseItem:Type := "ENT_CAT_DS";
		:EXITCASE;
		:CASE sEnterpriseCategory == "DataSources" .AND. nCount == 2;
			oEnterpriseItem:Type := "DSCATEGORY";
			oEnterpriseItem:Name := aComponents[2];
		:EXITCASE;
		:CASE sEnterpriseCategory == "DataSources" .AND. nCount == 3;
			oEnterpriseItem:Type := "DS";
			oEnterpriseItem:CategoryName := aComponents[2];
			oEnterpriseItem:Name := aComponents[3];
		:EXITCASE;
		:CASE sEnterpriseCategory == "ServerLogs" .AND. nCount == 1;
			oEnterpriseItem:Type := "ENT_CAT_LOG";
		:EXITCASE;
		:CASE sEnterpriseCategory == "ServerLogs" .AND. nCount == 2;
			oEnterpriseItem:Type := "SERVERLOG";
			oEnterpriseItem:CategoryName := aComponents[1];
			oEnterpriseItem:Name := aComponents[2];
		:EXITCASE;
		:CASE sEnterpriseCategory == "Tables" .AND. nCount == 1;
			oEnterpriseItem:Type := "ENT_CAT_TABLES";
		:EXITCASE;
		:CASE sEnterpriseCategory == "Tables" .AND. nCount == 2;
			oEnterpriseItem:Type := "TBLCATEGORY";
			oEnterpriseItem:Name := aComponents[2];
		:EXITCASE;
		:CASE sEnterpriseCategory == "Tables" .AND. nCount == 3;
			oEnterpriseItem:Type := "TABLE";
			oEnterpriseItem:CategoryName := aComponents[2];
			oEnterpriseItem:Name := aComponents[3];
		:EXITCASE;
	:ENDCASE;
	
	:RETURN oEnterpriseItem;
:ENDPROC;

:PROCEDURE GetURIComponents;
:PARAMETERS sURI;
:DECLARE aURIComponents;
	sURI := Replace(sURI, "\", "/");
	aURIComponents := BuildArray(sURI,,"/",,.T.);
	:IF Len(aURIComponents) > 0;
		:RETURN DelArray(aURIComponents, 1);
	:ELSE;
		:RETURN {};
	:ENDIF;
:ENDPROC;

/* ------------------------------------------------------------------
Returns the GUID of an item
---------------------------------------------------------------------;
:PROCEDURE GetItemGUID;
:PARAMETERS sItemName, sItemType;
:DECLARE sGUID, aItemName;

	:IF At(".", sItemName) > 0;
		aItemName := BuildArray(sItemName,, ".");
	:ELSE;
		aItemName := {sItemName};
	:ENDIF;

	sGUID := "";

	:BEGINCASE;
		:CASE sItemType == "APP";
			sGUID := Me:GetAppId(aItemName[1], aItemName[2]);
		:EXITCASE;
		:CASE sItemType == "APPCAT";
			sGUID := Me:GetAppCatId(aItemName[1]);
		:EXITCASE;
		:CASE sItemType == "SSCAT";
			sGUID := Me:GetSSCatId(aItemName[1]);
		:EXITCASE;
		:CASE sItemType == "CSCAT";
			sGUID := Me:GetCSCatId(aItemName[1]);
		:EXITCASE;
		:CASE sItemType == "DSCAT";
			sGUID := Me:GetDSCatId(aItemName[1]);
		:EXITCASE;
		:CASE sItemType == "SS".OR. sItemType == "APPSS";
			sGUID := Me:GetServerScriptId(aItemName[1], aItemName[2]);
		:EXITCASE;
		:CASE sItemType == "CS" .OR. sItemType == "APPCS";
			sGUID := Me:GetClientScriptId(aItemName[1], aItemName[2]);
		:EXITCASE;
		:CASE sItemType == "DS" .OR. sItemType == "APPDS";
			sGUID := Me:GetDataSourceId(aItemName[1], aItemName[2]);
		:EXITCASE;
		:CASE sItemType == "HTMLFORMXML" .OR. sItemType == "HTMLFORMCODE" .OR. sItemType == "HTMLFORMGUIDE" .OR. sItemType == "HTMLFORMRESOURCES";
			sGUID := Me:GetFormId(aItemName[1], aItemName[2], "HTML");
		:EXITCASE;
		:CASE sItemType == "XFDFORMXML" .OR. sItemType == "XFDFORMCODE" .OR. sItemType == "XFDFORMRESOURCES";
			sGUID := Me:GetFormId(aItemName[1], aItemName[2], "XFD");
		:EXITCASE;
		:CASE sItemType == "TABLE";
			sGUID := Me:GetTableId(aItemName[1]);
		:EXITCASE;
	:ENDCASE;
	
	:RETURN sGUID;
:ENDPROC;

/*--------------------------------------------------------------------
Returns the application GUID for application and category name
----------------------------------------------------------------------;
:PROCEDURE GetAppId;
:PARAMETERS sCategoryName, sAppName;
	:DECLARE sSQL, aReturn, sSysLayerId;
	sSysLayerId := GetSystemLayerId();
	sAppName := Upper(sAppName);
	sCategoryName := Upper(sCategoryName);
	sSQL :=
	"SELECT APPID 
	FROM LIMSAPPLICATIONS a
	JOIN LIMSAPPCATEGORIES c on c.CATEGORYID = a.CATEGORYID
	WHERE a.APPNAME = ?sAppName?
	AND c.CATNAME = ?sCategoryName?
	order by
	case
		when a.LAYERID <= ?sSysLayerId? then ?sSysLayerId? - a.LAYERID
		else a.LAYERID
	end";
	
	aReturn := SqlExecute(sSQL, "DICTIONARY");
	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;

/*--------------------------------------------------------------------
Returns the application category GUID for category name
----------------------------------------------------------------------;
:PROCEDURE GetAppCatId;
:PARAMETERS sCategoryName;
	:DECLARE sSQL, aReturn, sSysLayerId;
	sSysLayerId := GetSystemLayerId();
	sCategoryName := Upper(sCategoryName);
	sSQL :=
	"SELECT CATEGORYID
	FROM LIMSAPPCATEGORIES
	WHERE CATNAME = ?sCategoryName?
	order by
	case
		when LAYERID <= ?sSysLayerId? then ?sSysLayerId? - LAYERID
		else LAYERID
	end";
	
	aReturn := SqlExecute(sSQL, "DICTIONARY");
	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;

/*--------------------------------------------------------------------
Returns the server script category GUID for category name
----------------------------------------------------------------------;
:PROCEDURE GetSSCatId;
:PARAMETERS sCategoryName;
	:DECLARE sSQL, aReturn, sSysLayerId;
	sSysLayerId := GetSystemLayerId();
	sCategoryName := Upper(sCategoryName);
	sSQL :=
	"SELECT CATEGORYID
	FROM LIMSSERVERSCRIPTCATEGORIES
	WHERE CATNAME = ?sCategoryName?
	order by
	case
		when LAYERID <= ?sSysLayerId? then ?sSysLayerId? - LAYERID
		else LAYERID
	end";
	
	aReturn := SqlExecute(sSQL, "DICTIONARY");

	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;

/*--------------------------------------------------------------------
Returns the data source category GUID for category name
----------------------------------------------------------------------;
:PROCEDURE GetDSCatId;
:PARAMETERS sCategoryName;
	:DECLARE sSQL, aReturn, sSysLayerId;
	sSysLayerId := GetSystemLayerId();
	sCategoryName := Upper(sCategoryName);
	sSQL :=
	"SELECT CATEGORYID
	FROM LIMSDATASOURCECATEGORIES
	WHERE CATNAME = ?sCategoryName?
	order by
	case
		when LAYERID <= ?sSysLayerId? then ?sSysLayerId? - LAYERID
		else LAYERID
	end";
	
	aReturn := SqlExecute(sSQL, "DICTIONARY");

	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;

/*--------------------------------------------------------------------
Returns the client script category GUID for category name
----------------------------------------------------------------------;
:PROCEDURE GetCSCatId;
:PARAMETERS sCategoryName;
	:DECLARE sSQL, aReturn, sSysLayerId;
	sSysLayerId := GetSystemLayerId();
	sCategoryName := Upper(sCategoryName);
	sSQL :=
	"SELECT CATEGORYID
	FROM LIMSCLIENTSCRIPTCATEGORIES
	WHERE CATNAME = ?sCategoryName?
	order by
	case
		when LAYERID <= ?sSysLayerId? then ?sSysLayerId? - LAYERID
		else LAYERID
	end";
	
	aReturn := SqlExecute(sSQL, "DICTIONARY");
	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;
	
	:RETURN aReturn[1, 1];
:ENDPROC;

/* -------------------------------------------------------------------
Returns the Form GUID for the form identified by AppName and FormName
----------------------------------------------------------------------;
:PROCEDURE GetFormId;
:PARAMETERS sAppName, sFormName, sFormType;
:DEFAULT sFormType, 'XFD';
	:DECLARE sSQL, aReturn, sSysLayerId;
	sSysLayerId := GetSystemLayerId();
	sAppName := Upper(sAppName);
	sFormName := Upper(sFormName);
	sSQL := "SELECT f.FORMID 
				FROM LIMSXFDFORMS f, LIMSAPPLICATIONS
				WHERE f.APPID = LIMSAPPLICATIONS.APPID
					AND LIMSAPPLICATIONS.APPNAME = ?sAppName?
					AND f.FORMNAME = ?sFormName?
					AND FORMTYPE = ?sFormType?
				order by
					case
						when f.LAYERID <= ?sSysLayerId? then ?sSysLayerId? - f.LAYERID
						else f.LAYERID
					end";

	aReturn := SqlExecute(sSQL, "DICTIONARY");
	
	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;

/* -------------------------------------------------------------------------------
Returns the Client script GUID for the script identified by CatName and ScriptName
----------------------------------------------------------------------------------;
:PROCEDURE GetClientScriptId;
:PARAMETERS sCatName, sScriptName;
	:DECLARE sSQL, aReturn, sSysLayerId;
	sSysLayerId := GetSystemLayerId();
	sCatName := Upper(sCatName);
	sScriptName := Upper(sScriptName);
	sSQL := 
	"SELECT s.SCRIPTID
	FROM LIMSCLIENTSCRIPTS s, LIMSCLIENTSCRIPTCATEGORIES
	WHERE s.CATEGORYID = LIMSCLIENTSCRIPTCATEGORIES.CATEGORYID
	AND LIMSCLIENTSCRIPTCATEGORIES.CATNAME = ?sCatName?
	AND s.SCRIPTNAME = ?sScriptName?
	order by
	case
		when s.LAYERID <= ?sSysLayerId? then ?sSysLayerId? - s.LAYERID
		else s.LAYERID
	end";

	aReturn := SqlExecute(sSQL, "DICTIONARY");
	
	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;

/* -------------------------------------------------------------------------------
Returns the Server script GUID for the script identified by CatName and ScriptName
----------------------------------------------------------------------------------;
:PROCEDURE GetServerScriptId;
:PARAMETERS sCatName, sScriptName;
	:DECLARE sSQL, aReturn, sSysLayerId;
	sSysLayerId := GetSystemLayerId();	
	sCatName := Upper(sCatName);
	sScriptName := Upper(sScriptName);
	
	sSQL := 
	"SELECT s.SCRIPTID 
	FROM LIMSSERVERSCRIPTS s, LIMSSERVERSCRIPTCATEGORIES
	WHERE s.CATEGORYID = LIMSSERVERSCRIPTCATEGORIES.CATEGORYID
	AND LIMSSERVERSCRIPTCATEGORIES.CATNAME = ?sCatName?
	AND s.SCRIPTNAME = ?sScriptName?
	order by
	case
		when s.LAYERID <= ?sSysLayerId? then ?sSysLayerId? - s.LAYERID
		else s.LAYERID
	end";

	aReturn := SqlExecute(sSQL, "DICTIONARY");
	
	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;

/* ------------------------------------------------------------------
Private function used by other functions in this module.
Returns the name of an entity in cat.name format based on
an sql statement and an Id.
------------------------------------------------------------------;
:PROCEDURE GetEntityName;
:PARAMETERS sId, sSqlStatement;
	:DECLARE aReturn;
	aReturn := SqlExecute(sSqlStatement, "DICTIONARY");

	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1] + "." + aReturn[1, 2];
:ENDPROC;

/* -------------------------------------------------------------------------------
Returns the Data source GUID for the script identified by CatName and ScriptName
----------------------------------------------------------------------------------;
:PROCEDURE GetDataSourceId;
:PARAMETERS sCatName, sDSName;
	:DECLARE sSQL, aReturn, sSysLayerId;

	sSysLayerId := GetSystemLayerId();
	sCatName := Upper(sCatName);
	sDSName := Upper(sDSName);
	
	sSQL := "SELECT d.DATASOURCEID
				FROM LIMSDATASOURCES d, LIMSDATASOURCECATEGORIES c
				WHERE d.CATEGORYID = c.CATEGORYID
				AND c.CATNAME = ?sCatName?
				AND d.DSNAME = ?sDSName?
				order by
					case
						when d.LAYERID <= ?sSysLayerId? then ?sSysLayerId? - d.LAYERID
						else d.LAYERID
					end";

	aReturn := SqlExecute(sSQL, "DICTIONARY");
	
	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;


/* -------------------------------------------------------------------------------
Returns the table ID for the table identified by TableName
----------------------------------------------------------------------------------;
:PROCEDURE GetTableId;
:PARAMETERS sTableName;
	:DECLARE sSQL, aReturn, sSysLayerId;
	sTableName := Upper(sTableName);
	sSQL := "SELECT t.TABLEID
				FROM LIMSTABLES t
				WHERE t.TABLENAME=?sTableName?
				order by
					case
						when t.LAYERID <= ?sSysLayerId? then ?sSysLayerId? - t.LAYERID
						else t.LAYERID
					end";
 
	aReturn := SqlExecute(sSQL, "DICTIONARY"); 
	
	:IF Len(aReturn) = 0;
		:RETURN "";
	:ENDIF;

	:RETURN aReturn[1, 1];
:ENDPROC;