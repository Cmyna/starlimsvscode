/* eslint-disable no-undef */
/* eslint-disable no-unused-vars */
/*
Description.. :	HTML Forms Designer
Author....... :	DC
Date......... : 2623-07-11
*/
#include "FormDesigner.ContextMenu"
#include "FormDesigner.GUIFunctions"
#include "FormDesigner.TreeView"
#include "FormDesigner.ReadXML"
#include "FormDesigner.SaveXML"

//BEGIN_GLOBAL_DECLARATIONS (place global declarations inside this section)

var cboForm = form.All("cboForm"); // ComboBox 
var pnlTop = form.All("pnlTop"); // Panel
//var tpProperties = form.All( "tpProperties" ); // TabPage
var tpOutline = form.All("tpOutline"); // TabPage
var tcProperties = form.All("tcProperties"); // TabControl
var cboControl = form.All("cboControl"); // ComboBox
var txtDescription = form.All("txtDescription"); // TextArea
var lblDescription = form.All("lblDescription"); // Label
var Form1 = form.All("Form1"); // Panel
var lbrControls = form.All("lbrControls"); // LinkBar
var dgdProperties = form.All("dgdProperties"); // DataGrid

//END_GLOBAL_DECLARATIONS

// variables for GUIFunctions.js
var controlCounter = 0;
var selectedControl;
var htControls = new Hashtable();

async function lbrControls_OnItemClick(sender, eventArgs)
{
    var controlType = eventArgs.Item.Text;
    AddControl(controlType);
}

async function dgdProperties_OnUpdatingCell(sender, eventArgs)
{
    // write properties back to javascript object
    var sPropertyName = dgdProperties.GetCurrentRowData("PROPERTY_NAME");
    var value = eventArgs["value"];

    // convert event handler string to function
    if (sPropertyName.includes("On"))
    {
        value = eval(value);
        selectedControl[sPropertyName] = value;
        return;
    }

    // convert string to boolean
    value = value === "True" ? true : value === "False" ? false : value;

    switch (sPropertyName)
    {
        case "Visible":
            // change opacity
            if (value === "True")
                $('[automation-id="' + selectedControl.Id + '"]').css("opacity", "1");
            else
                $('[automation-id="' + selectedControl.Id + '"]').css("opacity", "0.2");
            return;
        case "Height":
            selectedControl.Height = parseInt(value);
            return;
        case "Width":
            selectedControl.Width = parseInt(value);
            return;
        case "Top":
            selectedControl.Top = parseInt(value);
            return;
        case "Left":
            selectedControl.Left = parseInt(value);
            return;
        case "Image":
            //selectedControl.Image = value;
            return;
        case "SelectedPage":
            selectedControl.SelectedPage = value;
            selectedControl.TabPages[value].Selected = true;
            return;
        case "Dock":
            if(!value)
                value = "NONE";
            selectedControl.Dock = value;

            if(value === "FILL" || value === "TOP" || value === "BOTTOM")
            {
                if(value === "TOP" || value === "FILL")
                    selectedControl.Top = 0;
                if(value === "BOTTOM")
                    selectedControl.Top = selectedControl.Parent.Height - selectedControl.Height;
                
                selectedControl.Left = 0;
                selectedControl.Width = selectedControl.Parent.Width;
            }
            if(value === "LEFT" || value === "RIGHT" || value === "FILL")
            {
                if(value === "LEFT" || value === "FILL")
                    selectedControl.Left = 0;
                if(value === "RIGHT")
                    selectedControl.Left = selectedControl.Parent.Width - selectedControl.Width;
                
                selectedControl.Top = 0;
                selectedControl.Height = selectedControl.Parent.Height;
            }
            UpdateSelectionFrame(selectedControl);
            return;
        default:
            selectedControl[sPropertyName] = value;
    }
}

async function dgdProperties_OnUdCellEditorRequest(sender, eventArgs)
{
    var sPropertyName = dgdProperties.GetCurrentRowData("PROPERTY_NAME");

    // open image picker for Image property
    if (eventArgs["column"].Id === "PROPERTY_VALUE" && sPropertyName.includes("Image"))
    {
        var sImageID = await form.ShowModalDialog(lims.GetFormSource("FormDesigner.dlgImagePicker"));

        // operation canceled
        if (sImageID == null)
            return;

        // "no image" button clicked
        if (sImageID === "NONE")
            sImageID = "";

        if (sPropertyName === "BackgroundImage")
        {
            //selectedControl.BackgroundImage = sImageID;
            if (sImageID === "NONE")
                selectedControl.body.setStyle("background-image", "");
            else
                selectedControl.body.setStyle("background-image", "url('" + sImageID + "')");
        }
        else
            selectedControl.Image = sImageID;

        eventArgs.Set("Value", sImageID);
    }
}

async function dgdProperties_OnRowChange(sender, eventArgs)
{
    if (form.Variables["PreventInputEvents"])
        return;

    var sPropertyName = dgdProperties.GetCurrentRowData("PROPERTY_NAME");
    var sPropertyValue = eventArgs["record"]["PROPERTY_VALUE"];
    
    SetProperties(sPropertyName, sPropertyValue);
}

async function frmFormDesigner_OnLoad(sender, eventArgs)
{
    await CreateEmptyForm();

    // populate controls combobox
    form.Variables["PreventInputEvents"] = true;
    LoadCboControls();
    form.Variables["PreventInputEvents"] = false;
}

async function cboControl_OnSelectionChanged(sender, eventArgs)
{
    if (form.Variables["PreventInputEvents"])
        return;
    
    // load control properties into grid
    __control_OnClick(htControls[sender.SelectedValue], null);
}

async function btnSave_OnClick(sender, eventArgs)
{
    if(cboForm.SelectedText == "" || cboForm.SelectedText == null)
        return;
    
    Form1.mask("Saving form...");
    await Application.DoEvents();
    
    var sAppName = cboForm.SelectedText.split(".")[0];
    var sFormName = cboForm.SelectedText.split(".")[1];
    var sFormLang = cboForm.SelectedText.match(/\(([^)]+)\)/)[1];
    SaveForm(sAppName, sFormName, sFormLang);
    
    Form1.unmask();
}

async function cboForm_OnSelectionChanged(sender, eventArgs)
{
    Form1.mask("Loading...");
    await Application.DoEvents();

    var sFormID = sender.SelectedValue;

    // use regex to get language from brackets in combobox text
    var sFormLang = sender.SelectedText.match(/\(([^)]+)\)/)[1];

    // read xml from database
    var sXML = await lims.CallServer("FormDesigner.scGetFormCode", [sFormID, sFormLang]);

    if (!sXML)
    {
        Form1.unmask();
        return;
    }

    // clear form
    if (Form1.Controls)
        Form1.Controls.Clear();

    htControls.Clear();
    pnlSelected.Visible = false;

    form.Variables["PreventInputEvents"] = true;
    form.Variables["PreventClickEvents"] = true;

    await CreateEmptyForm();
    await Application.DoEvents();

    // load form from xml
    Form1 = await LoadFormFromXML(sXML);
    Form1.Guid = cboForm.SelectedValue;
    Form1.Controls.Add(pnlSelected);
    selectedControl = Form1;
    treePanel.getRootNode().expand(true);

    await Application.DoEvents();

    // bind click and mouse drag events to all controls in form
    BindControlEvents(Form1);
    
    SetZIndex();

    form.Variables["PreventInputEvents"] = false;
    form.Variables["PreventClickEvents"] = false;

    Form1.unmask();
}

async function frmFormDesigner_OnCmdKeyPress( sender, eventArgs )
{
	var nKeyCode = event.keyCode;
	if(nKeyCode == 46) // del key
	{
		// delete control
        if(selectedControl != Form1)
            __control_OnDelete(selectedControl);
	}
}
